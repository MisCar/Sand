import {
  app,
  BrowserWindow,
  dialog,
  ipcMain,
  Menu,
  MenuItem,
  screen,
} from "electron"
import { readFileSync } from "original-fs"
import { platform } from "process"

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string

const DRIVERSTATION_HEIGHT = 268

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit()
}

const accelerator = (key: string) => {
  return platform === "darwin" ? "Cmd+" + key : "Ctrl+" + key
}

const createWindow = () => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
    },
  })

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

  return mainWindow
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  const mainWindow = createWindow()
  const menu = Menu.getApplicationMenu()
  const fileMenuIndex = platform === "darwin" ? 1 : 0
  menu.items[fileMenuIndex].submenu.insert(
    0,
    new MenuItem({
      label: "Open",
      accelerator: accelerator("O"),
      click: async () => {
        const result = await dialog.showOpenDialog(mainWindow, {
          filters: [{ name: "JSON", extensions: ["json"] }],
        })
        const file = result.filePaths[0]
        if (file) {
          mainWindow.webContents.send("open", readFileSync(file).toString())
        }
      },
    })
  )
  menu.items[fileMenuIndex].submenu.insert(
    1,
    new MenuItem({
      label: "Import",
      accelerator: accelerator("I"),
      click: async () => {
        const result = await dialog.showOpenDialog(mainWindow, {
          filters: [{ name: "JSON", extensions: ["json"] }],
        })
        const file = result.filePaths[0]
        if (file) {
          mainWindow.webContents.send("import", readFileSync(file).toString())
        }
      },
    })
  )
  menu.items[fileMenuIndex].submenu.insert(
    2,
    new MenuItem({
      label: "Save",
      accelerator: accelerator("S"),
      click: () => mainWindow.webContents.send("save"),
    })
  )
  menu.items[fileMenuIndex].submenu.insert(
    3,
    new MenuItem({
      label: "Save As",
      accelerator: accelerator("Shift+S"),
      click: async () => {
        const result = await dialog.showSaveDialog(mainWindow, {
          filters: [{ name: "JSON", extensions: ["json"] }],
        })
        const file = result.filePath
        if (file) {
          mainWindow.webContents.send("saveas", file)
        }
      },
    })
  )

  Menu.setApplicationMenu(menu)

  ipcMain.on("windowLock", () => {
    mainWindow.setResizable(false)
    mainWindow.setPosition(0, 0)
    const primaryDisplay = screen.getPrimaryDisplay()
    mainWindow.setSize(
      primaryDisplay.size.width,
      primaryDisplay.size.height - DRIVERSTATION_HEIGHT
    )
    mainWindow.setAlwaysOnTop(true)
  })

  ipcMain.on("windowUnlock", () => {
    mainWindow.setResizable(true)
    mainWindow.setAlwaysOnTop(false)
  })
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit()
  }
})

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
